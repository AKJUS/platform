name: Vercel Rewise Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_REWISE_PROJECT_ID }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_PUBLISHABLE_KEY }}
  SUPABASE_SECRET_KEY: ${{ secrets.PRODUCTION_SUPABASE_SECRET_KEY }}
  GOOGLE_VERTEX_PROJECT: ${{ secrets.GOOGLE_VERTEX_PROJECT }}
  GOOGLE_VERTEX_LOCATION: ${{ secrets.GOOGLE_VERTEX_LOCATION }}
on:
  push:
    branches:
      - production
    paths:
      - 'apps/rewise/**'
      - 'packages/**'
      - '.github/workflows/vercel-production-rewise.yaml'
  workflow_dispatch:

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for newer commits
        id: check_commits
        run: |
          git fetch origin production || { echo "Remote branch not found, continuing with build"; echo "skip_build=false" >> $GITHUB_OUTPUT; exit 0; }
          LATEST_COMMIT=$(git rev-parse origin/production 2>/dev/null || echo "")
          CURRENT_COMMIT=${GITHUB_SHA}
          if [ -n "$LATEST_COMMIT" ] && [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Newer commit found on production branch. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "This is the latest commit. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Quick content change detection
        id: quick_check
        if: steps.check_commits.outputs.skip_build != 'true'
        run: |
          git diff --name-only HEAD~ HEAD | grep -E 'apps/rewise/|packages/' > /tmp/changed_files.txt || true
          if [ ! -s /tmp/changed_files.txt ]; then
            echo "No relevant content changes detected. Skipping build."
            echo "skip_quick=true" >> $GITHUB_OUTPUT
          else
            echo "Content changes detected in $(wc -l < /tmp/changed_files.txt) files."
            echo "skip_quick=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup bun
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3.1"

      - name: Use Node.js 24
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: Cache dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        run: bun install --frozen-lockfile

      - name: Check Turborepo cache (conservative)
        id: turbo_check
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        run: |
          bunx turbo build --filter=@tuturuuu/rewise --dry-run=json > /tmp/turbo-plan-raw.json 2>&1 || {
            echo "::warning::Turborepo dry-run failed, proceeding with build for safety"
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          }

          # Extract JSON from output (skip any warnings/headers before the first {)
          sed -n '/{/,$ p' /tmp/turbo-plan-raw.json > /tmp/turbo-plan.json 2>/dev/null || {
            echo "::warning::Failed to extract JSON from Turborepo output, proceeding with build for safety"
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          }
          if [ ! -s /tmp/turbo-plan.json ]; then
            echo "::warning::Turborepo plan is empty, proceeding with build for safety"
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          uncached_count=$(jq -r '.tasks[] | select(.cache.status != "HIT") | .taskId' /tmp/turbo-plan.json 2>/dev/null | wc -l || echo "1")
          if [ "$uncached_count" -eq 0 ]; then
            echo "All tasks cached in Turborepo. Skipping build."
            echo "skip_turbo=true" >> $GITHUB_OUTPUT
          else
            echo "Found $uncached_count uncached tasks. Build required."
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
          fi
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Install Vercel CLI
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: bun install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build workspace dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: bunx turbo run build --filter=@tuturuuu/types

      - name: Build Project Artifacts
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel deploy --archive=tgz --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
