name: Check and Bump Package Versions

on:
  pull_request:
    paths:
      - 'packages/**'
  workflow_dispatch:

jobs:
  check-and-bump:
    env:
      # Use Vercel Remote Caching
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      # Configure production Supabase client
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      # Configure infrastructure
      PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
      NEXT_PUBLIC_PROXY_API_KEY: ${{ secrets.NEXT_PUBLIC_PROXY_API_KEY }}

      # Set GitHub token for CLI operations
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}

    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Configure Tiptap Pro
        run: |
          pnpm config set "@tiptap-pro:registry" https://registry.tiptap.dev/
          pnpm config set "//registry.tiptap.dev/:_authToken" ${{ secrets.TIPTAP_PRO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Get changed packages
        id: changed-packages
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_PACKAGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^packages/" | cut -d/ -f2 | sort -u || true)
          else
            CHANGED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep "^packages/" | cut -d/ -f2 | sort -u || true)
          fi
          echo "Changed packages: $CHANGED_PACKAGES"
          echo "packages=${CHANGED_PACKAGES}" >> $GITHUB_OUTPUT

      - name: Check and bump versions
        if: steps.changed-packages.outputs.packages != ''
        run: |
          # Ensure GitHub CLI is authenticated
          gh auth setup-git

          for package in ${{ steps.changed-packages.outputs.packages }}; do
            if [ -f "packages/$package/package.json" ]; then
              cd "packages/$package"
              
              # Get current version
              CURRENT_VERSION=$(node -p "require('./package.json').version")
              
              # Check if there's an existing PR for this package
              EXISTING_PRS=$(gh pr list --search "in:title bump-${package}" --json number --jq length)
              if [ "$EXISTING_PRS" -gt "0" ]; then
                echo "Found existing PR for package ${package}, skipping..."
                cd ../..
                continue
              fi

              # Calculate new checksum excluding build artifacts, lock files, and .checksum
              NEW_CHECKSUM=$(find . -type f \
                -not -path "./node_modules/*" \
                -not -path "./dist/*" \
                -not -path "./.next/*" \
                -not -path "./build/*" \
                -not -path "./.turbo/*" \
                -not -name "package-lock.json" \
                -not -name "yarn.lock" \
                -not -name "pnpm-lock.yaml" \
                -not -name ".checksum" \
                -not -name "*.log" \
                -exec sha256sum {} \; | sort | sha256sum | cut -d ' ' -f1)
              
              # Try to get old checksum, handle case where file doesn't exist yet
              OLD_CHECKSUM=""
              if git ls-files --error-unmatch .checksum >/dev/null 2>&1; then
                OLD_CHECKSUM=$(git show HEAD:.checksum 2>/dev/null || echo "")
              fi
              
              echo "Package: $package"
              echo "Current version: $CURRENT_VERSION"
              echo "Old checksum: $OLD_CHECKSUM"
              echo "New checksum: $NEW_CHECKSUM"
              
              # Check if there are meaningful changes (not just build artifacts)
              if [ "$NEW_CHECKSUM" != "$OLD_CHECKSUM" ]; then
                # First, check if this is a new package (no old checksum)
                if [ -z "$OLD_CHECKSUM" ]; then
                  echo "New package detected, will create initial version"
                  SHOULD_BUMP=true
                else
                  # For existing packages, check if source files changed
                  SOURCE_FILES_CHANGED=$(git ls-files "packages/$package" | grep -E "\.(ts|tsx|js|jsx|json|css|scss|md)$" | while read -r file; do
                    if [ -f "$file" ]; then
                      echo "$file"
                    fi
                  done)
                  
                  if [ -n "$SOURCE_FILES_CHANGED" ]; then
                    echo "Source files found:"
                    echo "$SOURCE_FILES_CHANGED"
                    SHOULD_BUMP=true
                  else
                    echo "No source files changed"
                    SHOULD_BUMP=false
                  fi
                fi
                
                if [ "$SHOULD_BUMP" = true ]; then
                  NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
                  echo "Meaningful changes detected, bumping version to: $NEW_VERSION"
                  
                  # Update package.json with new version
                  sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
                  
                  # Update checksum
                  echo "$NEW_CHECKSUM" > .checksum
                  
                  # Create a new branch for version bump
                  BRANCH_NAME="bump-${package}-${NEW_VERSION}"
                  git checkout -b "$BRANCH_NAME"
                  
                  git add package.json .checksum
                  git commit -m "chore(@tutur3u/${package}): bump version to ${NEW_VERSION}"
                  git push origin "$BRANCH_NAME"
                  
                  # Create PR using GitHub CLI
                  PR_BODY="Automated version bump due to package changes<br />"
                  
                  # Format the changed files list with proper newlines
                  if [ -n "$SOURCE_FILES_CHANGED" ]; then
                    FORMATTED_FILES=$(echo "$SOURCE_FILES_CHANGED" | sed 's/^/- `/' | sed 's/$/`<br \/>/' | tr '\n' ' ')
                    PR_BODY="$PR_BODY<br />### Changed Files<br />$FORMATTED_FILES"
                  fi
                  
                  PR_BODY="$PR_BODY<br />### Checksums<br />"
                  PR_BODY="$PR_BODY**New:**<br />\`\`\`<br />$NEW_CHECKSUM<br />\`\`\`<br />"
                  
                  if [ -n "$OLD_CHECKSUM" ]; then
                    PR_BODY="$PR_BODY**Previous:**<br />\`\`\`<br />$OLD_CHECKSUM<br />\`\`\`"
                  else
                    PR_BODY="$PR_BODY**Previous:** No previous checksum found (new package or first time tracking)<br />"
                  fi
                  
                  # Add summary section at the top with enhanced formatting
                  SUMMARY="### Summary<br />üì¶ Package: \`@tutur3u/${package}\`<br />üìù Version Changes:<br />  ‚Ä¢ From: \`${CURRENT_VERSION}\`<br />  ‚Ä¢ To: \`${NEW_VERSION}\`<br />"
                  PR_BODY="$SUMMARY<br />$PR_BODY"
                  
                  gh pr create \
                    --title "chore(@tutur3u/${package}): bump version to ${NEW_VERSION}" \
                    --body "$PR_BODY" \
                    --base ${{ github.event.pull_request.base.ref || 'main' }} \
                    --head "$BRANCH_NAME" \
                    --repo ${{ github.repository }} || {
                      echo "Failed to create PR for $BRANCH_NAME. This may be because a PR already exists."
                    }
                else
                  echo "No meaningful source file changes detected, skipping version bump"
                fi
              fi
              
              cd ../..
            fi
          done
