name: Check and Bump Package Versions

on:
  pull_request:
    paths:
      - 'packages/**'
  workflow_dispatch:

jobs:
  check-and-bump:
    env:
      # Use Vercel Remote Caching
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      # Configure production Supabase client
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      # Configure infrastructure
      PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
      NEXT_PUBLIC_PROXY_API_KEY: ${{ secrets.NEXT_PUBLIC_PROXY_API_KEY }}

    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Configure Tiptap Pro
        run: |
          pnpm config set "@tiptap-pro:registry" https://registry.tiptap.dev/
          pnpm config set "//registry.tiptap.dev/:_authToken" ${{ secrets.TIPTAP_PRO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Get changed packages
        id: changed-packages
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_PACKAGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^packages/" | cut -d/ -f2 | sort -u || true)
          else
            CHANGED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep "^packages/" | cut -d/ -f2 | sort -u || true)
          fi
          echo "Changed packages: $CHANGED_PACKAGES"
          echo "packages=${CHANGED_PACKAGES}" >> $GITHUB_OUTPUT

      - name: Check and bump versions
        if: steps.changed-packages.outputs.packages != ''
        run: |
          for package in ${{ steps.changed-packages.outputs.packages }}; do
            if [ -f "packages/$package/package.json" ]; then
              cd "packages/$package"
              
              # Calculate new checksum
              NEW_CHECKSUM=$(find . -type f -not -path "./node_modules/*" -not -path "./dist/*" -exec sha256sum {} \; | sort | sha256sum | cut -d ' ' -f1)
              
              # Get current version
              CURRENT_VERSION=$(node -p "require('./package.json').version")
              
              # Try to get old checksum, continue if file doesn't exist
              OLD_CHECKSUM=$(git show HEAD:packages/$package/.checksum 2>/dev/null || echo "")
              
              echo "Package: $package"
              echo "Current version: $CURRENT_VERSION"
              echo "Old checksum: $OLD_CHECKSUM"
              echo "New checksum: $NEW_CHECKSUM"
              
              if [ "$NEW_CHECKSUM" != "$OLD_CHECKSUM" ]; then
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
                echo "Bumping version to: $NEW_VERSION"
                
                # Update package.json with new version
                sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
                
                # Update checksum
                echo "$NEW_CHECKSUM" > .checksum
                
                # Create a new branch for version bump
                BRANCH_NAME="bump-${package}-${NEW_VERSION}"
                git checkout -b "$BRANCH_NAME"
                
                git add package.json .checksum
                git commit -m "chore(@tutur3u/${package}): bump version to ${NEW_VERSION}"
                git push origin "$BRANCH_NAME"
                
                # Create PR using GitHub CLI with explicit token
                echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
                gh pr create \
                  --title "chore(@tutur3u/${package}): bump version to ${NEW_VERSION}" \
                  --body "Automated version bump due to package changes\n\nChecksum changed from:\n\`\`\`\n$OLD_CHECKSUM\n\`\`\`\nto:\n\`\`\`\n$NEW_CHECKSUM\n\`\`\`" \
                  --base ${{ github.event.pull_request.base.ref || 'main' }} \
                  --head "$BRANCH_NAME" \
                  --repo ${{ github.repository }} || {
                    echo "Failed to create PR for $BRANCH_NAME. This may be because a PR already exists."
                  }
              fi
              
              cd ../..
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
