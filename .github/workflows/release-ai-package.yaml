name: Release AI Package

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Use Vercel Remote Caching
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      # Configure production Supabase client
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      # Configure infrastructure
      PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
      NEXT_PUBLIC_PROXY_API_KEY: ${{ secrets.NEXT_PUBLIC_PROXY_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Configure Tiptap Pro
        run: |
          pnpm config set "@tiptap-pro:registry" https://registry.tiptap.dev/
          pnpm config set "//registry.tiptap.dev/:_authToken" ${{ secrets.TIPTAP_PRO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        working-directory: packages/ai
        run: pnpm test

  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check versions match
        working-directory: packages/ai
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          JSR_VERSION=$(node -p "require('./jsr.json').version")
          if [ "$PKG_VERSION" != "$JSR_VERSION" ]; then
            echo "Version mismatch: package.json ($PKG_VERSION) != jsr.json ($JSR_VERSION)"
            exit 1
          fi
          echo "Versions match: $PKG_VERSION"

  publish-gpr:
    needs: [build, version-check]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: https://npm.pkg.github.com/

      - name: Configure Tiptap Pro
        run: |
          pnpm config set "@tiptap-pro:registry" https://registry.tiptap.dev/
          pnpm config set "//registry.tiptap.dev/:_authToken" ${{ secrets.TIPTAP_PRO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Publish package
        working-directory: packages/ai
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish-jsr:
    needs: [build, version-check]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Configure Tiptap Pro
        run: |
          pnpm config set "@tiptap-pro:registry" https://registry.tiptap.dev/
          pnpm config set "//registry.tiptap.dev/:_authToken" ${{ secrets.TIPTAP_PRO_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Publish package
        working-directory: packages/ai
        run: pnpm dlx jsr publish
