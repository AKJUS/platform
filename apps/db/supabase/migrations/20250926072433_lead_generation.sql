create table "public"."guest_users_lead_generation" (
    "id" bigint generated by default as identity not null,
    "ws_id" uuid not null,
    "user_id" uuid not null,
    "mail_id" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."guest_users_lead_generation" enable row level security;

alter table "public"."workspace_settings" add column "guest_user_checkup_threshold" smallint;

CREATE UNIQUE INDEX guest_users_lead_generation_pkey ON public.guest_users_lead_generation USING btree (id);

alter table "public"."guest_users_lead_generation" add constraint "guest_users_lead_generation_pkey" PRIMARY KEY using index "guest_users_lead_generation_pkey";

alter table "public"."guest_users_lead_generation" add constraint "guest_users_lead_generation_mail_id_fkey" FOREIGN KEY (mail_id) REFERENCES sent_emails(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."guest_users_lead_generation" validate constraint "guest_users_lead_generation_mail_id_fkey";

alter table "public"."guest_users_lead_generation" add constraint "guest_users_lead_generation_user_id_fkey" FOREIGN KEY (user_id) REFERENCES workspace_users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."guest_users_lead_generation" validate constraint "guest_users_lead_generation_user_id_fkey";

alter table "public"."guest_users_lead_generation" add constraint "guest_users_lead_generation_ws_id_fkey" FOREIGN KEY (ws_id) REFERENCES workspaces(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."guest_users_lead_generation" validate constraint "guest_users_lead_generation_ws_id_fkey";

alter table "public"."workspace_settings" add constraint "workspace_settings_guest_user_checkup_threshold_check" CHECK ((guest_user_checkup_threshold > 0)) not valid;

alter table "public"."workspace_settings" validate constraint "workspace_settings_guest_user_checkup_threshold_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_guest_lead_generation_conditions()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  is_guest_user BOOLEAN;
  attendance_threshold SMALLINT;
  attendance_count INTEGER;
BEGIN
  -- Check 1: Verify the user is a guest
  SELECT public.is_user_guest(NEW.user_id) INTO is_guest_user;

  IF NOT is_guest_user THEN
    RAISE EXCEPTION 'Cannot create lead generation record: User is not a guest.';
  END IF;

  -- Check 2: Verify attendance meets the workspace's minimum threshold
  SELECT ws.guest_user_checkup_threshold
  INTO attendance_threshold
  FROM public.workspace_settings ws
  WHERE ws.ws_id = NEW.ws_id;

  IF attendance_threshold IS NULL THEN
      RAISE EXCEPTION 'Cannot create lead generation record: Attendance threshold is not set for this workspace.';
  END IF;

  -- Calculate the raw count of 'PRESENT' or 'LATE' sessions
  SELECT COUNT(*)
  INTO attendance_count
  FROM public.user_group_attendance
  WHERE user_id = NEW.user_id AND status IN ('PRESENT', 'LATE');

  -- Block the insert if attendance is BELOW the minimum required threshold
  IF attendance_count < attendance_threshold THEN
    RAISE EXCEPTION 'Cannot create lead generation record: User attendance count (%) does not meet the minimum required threshold of %.', attendance_count, attendance_threshold;
  END IF;

  -- All checks passed, allow the INSERT operation to proceed
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.create_guest_lead_email(p_ws_id uuid, p_sender_id uuid, p_receiver_id uuid, p_source_name text, p_source_email text, p_subject text, p_content text, p_email text, p_post_id uuid DEFAULT NULL::uuid)
 RETURNS jsonb
 LANGUAGE plpgsql
AS $function$
DECLARE
  new_mail_id UUID;
BEGIN
  -- Step 1: Insert the email record into 'sent_emails'
  INSERT INTO public.sent_emails
    (ws_id, sender_id, receiver_id, source_name, source_email, subject, content, email, post_id)
  VALUES
    (p_ws_id, p_sender_id, p_receiver_id, p_source_name, p_source_email, p_subject, p_content, p_email, p_post_id)
  RETURNING id INTO new_mail_id;

  -- Step 2: Attempt to insert into 'guest_user_lead_generation'.
  -- The trigger will automatically run here and perform all validations.
  INSERT INTO public.guest_users_lead_generation
    (ws_id, user_id, mail_id)
  VALUES
    (p_ws_id, p_receiver_id, new_mail_id);

  -- If both inserts succeed, return the new mail ID
  RETURN jsonb_build_object('status', 'success', 'mail_id', new_mail_id);
END;
$function$
;

grant delete on table "public"."guest_users_lead_generation" to "anon";

grant insert on table "public"."guest_users_lead_generation" to "anon";

grant references on table "public"."guest_users_lead_generation" to "anon";

grant select on table "public"."guest_users_lead_generation" to "anon";

grant trigger on table "public"."guest_users_lead_generation" to "anon";

grant truncate on table "public"."guest_users_lead_generation" to "anon";

grant update on table "public"."guest_users_lead_generation" to "anon";

grant delete on table "public"."guest_users_lead_generation" to "authenticated";

grant insert on table "public"."guest_users_lead_generation" to "authenticated";

grant references on table "public"."guest_users_lead_generation" to "authenticated";

grant select on table "public"."guest_users_lead_generation" to "authenticated";

grant trigger on table "public"."guest_users_lead_generation" to "authenticated";

grant truncate on table "public"."guest_users_lead_generation" to "authenticated";

grant update on table "public"."guest_users_lead_generation" to "authenticated";

grant delete on table "public"."guest_users_lead_generation" to "service_role";

grant insert on table "public"."guest_users_lead_generation" to "service_role";

grant references on table "public"."guest_users_lead_generation" to "service_role";

grant select on table "public"."guest_users_lead_generation" to "service_role";

grant trigger on table "public"."guest_users_lead_generation" to "service_role";

grant truncate on table "public"."guest_users_lead_generation" to "service_role";

grant update on table "public"."guest_users_lead_generation" to "service_role";

create policy "Full access for organization members"
on "public"."guest_users_lead_generation"
as permissive
for all
to public
using (is_org_member(ws_id, auth.uid()))
with check (is_org_member(ws_id, auth.uid()));


CREATE TRIGGER before_insert_guest_lead_generation BEFORE INSERT ON public.guest_users_lead_generation FOR EACH ROW EXECUTE FUNCTION check_guest_lead_generation_conditions();


